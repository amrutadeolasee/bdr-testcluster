---

# This shouldn't be necessary as bdr_join_wait_for_node_ready should be enough. But isn't, apparently.
#- name: Wait for BDR to really be ready
#pause: seconds=10

- name: Force a dummy transaction so there is something to replay
  command: "{{postgres_install_dir}}/bin/psql -qAtw '{{bdr_node_dsn}}' -c \"UPDATE bdr.bdr_nodes SET node_status = node_status;\""

- name: wait 30s for replay
  pause: seconds=30

- name: Ensure peers are caught up
  command: "{{postgres_install_dir}}/bin/psql -qAtw '{{bdr_node_dsn}}' -c \"SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), 0);\""

- name: CREATE TABLE bdr_check
  command: "{{postgres_install_dir}}/bin/psql -qAt '{{bdr_node_dsn}}' -c 'CREATE TABLE {{bdr_check_table}} (node_name text primary key);' "

- name: CREATE TABLE bdr_globalseq_check
  command: >
    "{{postgres_install_dir}}/bin/psql" -qAt "{{bdr_node_dsn}}" -c "
     BEGIN;
     CREATE SEQUENCE {{bdr_check_table}}_globalseq_id_seq USING bdr;
     CREATE TABLE {{bdr_check_table}}_globalseq (
         id integer not null default(nextval('{{bdr_check_table}}_globalseq_id_seq')),
         node_name text primary key
     );
     ALTER SEQUENCE {{bdr_check_table}}_globalseq_id_seq OWNED BY {{bdr_check_table}}_globalseq.id;
     COMMIT;
     "

- name: Wait for CREATE TABLE to replicate
  command: "{{postgres_install_dir}}/bin/psql -qAtw '{{bdr_node_dsn}}' -c \"SELECT pg_xlog_wait_remote_apply(pg_current_xlog_location(), 0);\""
